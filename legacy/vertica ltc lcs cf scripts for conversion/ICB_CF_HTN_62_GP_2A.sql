--ICB_CF_HTN_62_GP_2A
--update to match HTN 63 with new cluster codes and selecting MAX BP

-- Creating a population from base that excludes the highest priority patients from ICB_CF_HTN_61_GP_1
WITH Population AS (
    SELECT DISTINCT EMPI_ID
    FROM ICB_CF_HTN_61_BASE
    EXCEPT
    SELECT EMPI_ID FROM ICB_CF_HTN_61_GP_1
),

-- Select latest reading for systolic and diastolic
BP_RESULTS AS (
    SELECT
        EMPI_ID,
        CLUSTER_ID,
        SOURCE_DESCRIPTION,
        RESULT_CODE,
        NORM_NUMERIC_VALUE

    FROM (
        SELECT DISTINCT
            P.EMPI_ID,
            SOURCE_DESCRIPTION,
            L.CLUSTER_ID,
            R.RESULT_CODE,
            NORM_NUMERIC_VALUE,
            SERVICE_DATE,
            ROW_NUMBER()
                OVER (
                    PARTITION BY P.EMPI_ID, R.SOURCE_DESCRIPTION, L.CLUSTER_ID
                    ORDER BY R.SERVICE_DATE DESC, NORM_NUMERIC_VALUE DESC
                )
                AS ROW_NUMBER
        FROM Population AS P
        INNER JOIN PH_F_RESULT AS R ON P.EMPI_ID = R.EMPI_ID
        INNER JOIN JOINED_LTC_LOOKUP AS L ON R.RESULT_CODE = L.SNOMED_CODE
        WHERE
            L.CLUSTER_ID IN ('HTN_SYSTOLIC_1', 'HTN_DIASTOLIC_1')
            AND R.NORM_NUMERIC_VALUE > 0
            AND DATE(R.SERVICE_DATE) <= CURRENT_DATE()

    ) AS RESULT
    WHERE ROW_NUMBER = 1
),


-- CREATING CTE FOR EMIS SOURCED
EMIS AS (
    SELECT DISTINCT
        EMPI_ID,
        1 AS 'EMIS'
    FROM
        (
            --INCLUDING ALL PATIENTS FROM BASE AND WITH SYSTOLIC CLINC BP >=160
            SELECT DISTINCT B.EMPI_ID
            FROM BP_RESULTS AS B
            INNER JOIN JOINED_LTC_LOOKUP AS L ON B.RESULT_CODE = L.SNOMED_CODE
            WHERE
                SOURCE_DESCRIPTION = 'EMIS GP'
                AND B.CLUSTER_ID = 'HTN_SYSTOLIC_1'
                AND L.CLUSTER_ID = 'HTN_SYSTOLIC_2'
                AND NORM_NUMERIC_VALUE >= 160


            UNION
            --INCLUDING ALL PATIENTS FROM BASE AND WITH DIASTOLIC CLINIC BP >=100
            SELECT DISTINCT B.EMPI_ID
            FROM BP_RESULTS AS B
            INNER JOIN JOINED_LTC_LOOKUP AS L ON B.RESULT_CODE = L.SNOMED_CODE
            WHERE
                SOURCE_DESCRIPTION = 'EMIS GP'
                AND B.CLUSTER_ID = 'HTN_DIASTOLIC_1'
                AND L.CLUSTER_ID = 'HTN_DIASTOLIC_2'
                AND NORM_NUMERIC_VALUE >= 100


            UNION
            --INCLUDING ALL PATIENTS FROM BASE AND WITH SYSTOLIC AMBULATORY BP >=150
            SELECT DISTINCT B.EMPI_ID
            FROM BP_RESULTS AS B
            INNER JOIN JOINED_LTC_LOOKUP AS L ON B.RESULT_CODE = L.SNOMED_CODE
            WHERE
                SOURCE_DESCRIPTION = 'EMIS GP'
                AND B.CLUSTER_ID = 'HTN_SYSTOLIC_1'
                AND L.CLUSTER_ID = 'HTN_AMBULATORY_SYSTOLIC'
                AND NORM_NUMERIC_VALUE >= 150


            UNION
            --INCLUDING ALL PATIENTS FROM BASE AND WITH DIASTOLIC AMBULATORY BP >=95
            SELECT DISTINCT B.EMPI_ID
            FROM BP_RESULTS AS B
            INNER JOIN JOINED_LTC_LOOKUP AS L ON B.RESULT_CODE = L.SNOMED_CODE
            WHERE
                SOURCE_DESCRIPTION = 'EMIS GP'
                AND B.CLUSTER_ID = 'HTN_DIASTOLIC_1'
                AND L.CLUSTER_ID = 'HTN_AMBULATORY_DIASTOLIC'
                AND NORM_NUMERIC_VALUE >= 95

        ) AS Res
),

-- CREATING CTE FOR 'OTHER' SOURCED
OTHER AS (
    SELECT DISTINCT
        EMPI_ID,
        1 AS 'OTHER'
    FROM
        (
            --INCLUDING ALL PATIENTS FROM BASE AND WITH SYSTOLIC CLINC BP >=160
            SELECT DISTINCT B.EMPI_ID
            FROM BP_RESULTS AS B
            INNER JOIN JOINED_LTC_LOOKUP AS L ON B.RESULT_CODE = L.SNOMED_CODE
            WHERE
                --SOURCE_DESCRIPTION = 'EMIS GP' AND
                B.CLUSTER_ID = 'HTN_SYSTOLIC_1'
                AND L.CLUSTER_ID = 'HTN_SYSTOLIC_2'
                AND NORM_NUMERIC_VALUE >= 160


            UNION
            --INCLUDING ALL PATIENTS FROM BASE AND WITH DIASTOLIC CLINIC BP >=100
            SELECT DISTINCT B.EMPI_ID
            FROM BP_RESULTS AS B
            INNER JOIN JOINED_LTC_LOOKUP AS L ON B.RESULT_CODE = L.SNOMED_CODE
            WHERE
                --SOURCE_DESCRIPTION = 'EMIS GP' AND
                B.CLUSTER_ID = 'HTN_DIASTOLIC_1'
                AND L.CLUSTER_ID = 'HTN_DIASTOLIC_2'
                AND NORM_NUMERIC_VALUE >= 100


            UNION
            --INCLUDING ALL PATIENTS FROM BASE AND WITH SYSTOLIC AMBULATORY BP >=150
            SELECT DISTINCT B.EMPI_ID
            FROM BP_RESULTS AS B
            INNER JOIN JOINED_LTC_LOOKUP AS L ON B.RESULT_CODE = L.SNOMED_CODE
            WHERE
                --SOURCE_DESCRIPTION = 'EMIS GP' AND
                B.CLUSTER_ID = 'HTN_SYSTOLIC_1'
                AND L.CLUSTER_ID = 'HTN_AMBULATORY_SYSTOLIC'
                AND NORM_NUMERIC_VALUE >= 150


            UNION
            --INCLUDING ALL PATIENTS FROM BASE AND WITH DIASTOLIC AMBULATORY BP >=95
            SELECT DISTINCT B.EMPI_ID
            FROM BP_RESULTS AS B
            INNER JOIN JOINED_LTC_LOOKUP AS L ON B.RESULT_CODE = L.SNOMED_CODE
            WHERE
                --SOURCE_DESCRIPTION = 'EMIS GP' AND
                B.CLUSTER_ID = 'HTN_DIASTOLIC_1'
                AND L.CLUSTER_ID = 'HTN_AMBULATORY_DIASTOLIC'
                AND NORM_NUMERIC_VALUE >= 95
        ) AS Res
)

-- USING 'OTHER' TABLE TO GET WHOLE COHORT AND LEFT JOINING TO SEE WHETHER THEY ARE EMIS SOURCED OR NOT
SELECT
    COALESCE(E.Empi_Id, O.Empi_Id) AS Empi_Id,
    CASE WHEN E.EMIS = 1 THEN 'EMIS' ELSE 'Other' END AS SOURCE
FROM EMIS AS E
FULL OUTER JOIN OTHER AS O ON E.Empi_Id = O.Empi_Id
