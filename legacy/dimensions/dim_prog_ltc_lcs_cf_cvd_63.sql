CREATE OR REPLACE DYNAMIC TABLE DATA_LAB_NCL_TRAINING_TEMP.HEI_MIGRATION.DIM_PROG_LTC_LCS_CF_CVD_63 (
    PERSON_ID VARCHAR,
    SK_PATIENT_ID VARCHAR,
    AGE NUMBER,
    NEEDS_STATIN_REVIEW BOOLEAN,
    LATEST_STATIN_DATE DATE,
    LATEST_NON_HDL_DATE DATE,
    LATEST_NON_HDL_VALUE NUMBER,
    ALL_STATIN_CODES ARRAY,
    ALL_STATIN_DISPLAYS ARRAY,
    ALL_NON_HDL_CODES ARRAY,
    ALL_NON_HDL_DISPLAYS ARRAY
)
COMMENT = 'Dimension table for LTC LCS case finding indicator CVD_63: Patients who need a statin review. Identifies patients on statins with non-HDL cholesterol > 2.5. Only includes patients who meet all criteria from the base population.'
TARGET_LAG = '4 hours'
REFRESH_MODE = AUTO
INITIALIZE = ON_CREATE
WAREHOUSE = NCL_ANALYTICS_XS
AS
WITH StatinMedications AS (
    -- Get all statin medications
    SELECT
        PERSON_ID,
        SK_PATIENT_ID,
        CLINICAL_EFFECTIVE_DATE,
        CONCEPT_CODE,
        CONCEPT_DISPLAY
    FROM DATA_LAB_NCL_TRAINING_TEMP.HEI_MIGRATION.INTERMEDIATE_LTC_LCS_RAW_DATA
    WHERE CLUSTER_ID = 'STATIN_CVD_63_MEDICATIONS'
),
StatinRanked AS (
    -- Rank statin medications by date for each person
    SELECT
        *,
        ROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY CLINICAL_EFFECTIVE_DATE DESC) AS MEDICATION_RANK
    FROM StatinMedications
    QUALIFY MEDICATION_RANK = 1
),
StatinCodes AS (
    -- Get all codes and displays for each person
    SELECT
        PERSON_ID,
        ARRAY_AGG(DISTINCT CONCEPT_CODE) WITHIN GROUP (ORDER BY CONCEPT_CODE) AS ALL_STATIN_CODES,
        ARRAY_AGG(DISTINCT CONCEPT_DISPLAY) WITHIN GROUP (ORDER BY CONCEPT_DISPLAY) AS ALL_STATIN_DISPLAYS
    FROM StatinMedications
    GROUP BY PERSON_ID
),
NonHDLReadings AS (
    -- Get all non-HDL cholesterol readings
    SELECT
        PERSON_ID,
        SK_PATIENT_ID,
        CLINICAL_EFFECTIVE_DATE,
        RESULT_VALUE,
        CONCEPT_CODE,
        CONCEPT_DISPLAY
    FROM DATA_LAB_NCL_TRAINING_TEMP.HEI_MIGRATION.INTERMEDIATE_LTC_LCS_RAW_DATA
    WHERE CLUSTER_ID = 'NON_HDL_CHOLESTEROL'
        AND RESULT_VALUE > 0
),
NonHDLRanked AS (
    -- Rank non-HDL readings by date for each person
    SELECT
        *,
        ROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY CLINICAL_EFFECTIVE_DATE DESC) AS READING_RANK
    FROM NonHDLReadings
    QUALIFY READING_RANK = 1
),
NonHDLCodes AS (
    -- Get all codes and displays for each person
    SELECT
        PERSON_ID,
        ARRAY_AGG(DISTINCT CONCEPT_CODE) WITHIN GROUP (ORDER BY CONCEPT_CODE) AS ALL_NON_HDL_CODES,
        ARRAY_AGG(DISTINCT CONCEPT_DISPLAY) WITHIN GROUP (ORDER BY CONCEPT_DISPLAY) AS ALL_NON_HDL_DISPLAYS
    FROM NonHDLReadings
    GROUP BY PERSON_ID
)
-- Final selection
SELECT
    bp.PERSON_ID,
    bp.SK_PATIENT_ID,
    bp.AGE,
    CASE 
        WHEN sm.PERSON_ID IS NOT NULL AND nh.RESULT_VALUE > 2.5 THEN TRUE
        ELSE FALSE
    END AS NEEDS_STATIN_REVIEW,
    sm.CLINICAL_EFFECTIVE_DATE AS LATEST_STATIN_DATE,
    nh.CLINICAL_EFFECTIVE_DATE AS LATEST_NON_HDL_DATE,
    nh.RESULT_VALUE AS LATEST_NON_HDL_VALUE,
    codes.ALL_STATIN_CODES,
    codes.ALL_STATIN_DISPLAYS,
    nh_codes.ALL_NON_HDL_CODES,
    nh_codes.ALL_NON_HDL_DISPLAYS
FROM DATA_LAB_NCL_TRAINING_TEMP.HEI_MIGRATION.INTERMEDIATE_LTC_LCS_CF_CVD_BASE bp
LEFT JOIN StatinRanked sm
    USING (PERSON_ID)
LEFT JOIN StatinCodes codes
    USING (PERSON_ID)
LEFT JOIN NonHDLRanked nh
    USING (PERSON_ID)
LEFT JOIN NonHDLCodes nh_codes
    USING (PERSON_ID)
WHERE sm.PERSON_ID IS NOT NULL 
    AND nh.RESULT_VALUE > 2.5; 