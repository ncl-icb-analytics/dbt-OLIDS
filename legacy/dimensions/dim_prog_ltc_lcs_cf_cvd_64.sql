CREATE OR REPLACE DYNAMIC TABLE DATA_LAB_NCL_TRAINING_TEMP.HEI_MIGRATION.DIM_PROG_LTC_LCS_CF_CVD_64 (
    PERSON_ID VARCHAR,
    SK_PATIENT_ID VARCHAR,
    AGE NUMBER,
    NEEDS_HIGH_DOSE_STATIN BOOLEAN,
    LATEST_STATIN_DATE DATE,
    ALL_STATIN_CODES ARRAY,
    ALL_STATIN_DISPLAYS ARRAY
)
COMMENT = 'Dimension table for LTC LCS case finding indicator CVD_64: Patients who need high-dose statins. Identifies patients from the base population who are not on statins and have no recent statin decisions. Only includes patients who meet all criteria.'
TARGET_LAG = '4 hours'
REFRESH_MODE = AUTO
INITIALIZE = ON_CREATE
WAREHOUSE = NCL_ANALYTICS_XS
AS
WITH StatinMedications AS (
    -- Get all high-dose statin medications
    SELECT
        PERSON_ID,
        SK_PATIENT_ID,
        CLINICAL_EFFECTIVE_DATE,
        CONCEPT_CODE,
        CONCEPT_DISPLAY
    FROM DATA_LAB_NCL_TRAINING_TEMP.HEI_MIGRATION.INTERMEDIATE_LTC_LCS_RAW_DATA
    WHERE CLUSTER_ID = 'STATIN_CVD_64_MEDICATIONS'
),
StatinRanked AS (
    -- Rank statin medications by date for each person
    SELECT
        *,
        ROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY CLINICAL_EFFECTIVE_DATE DESC) AS MEDICATION_RANK
    FROM StatinMedications
    QUALIFY MEDICATION_RANK = 1
),
StatinCodes AS (
    -- Get all codes and displays for each person
    SELECT
        PERSON_ID,
        ARRAY_AGG(DISTINCT CONCEPT_CODE) WITHIN GROUP (ORDER BY CONCEPT_CODE) AS ALL_STATIN_CODES,
        ARRAY_AGG(DISTINCT CONCEPT_DISPLAY) WITHIN GROUP (ORDER BY CONCEPT_DISPLAY) AS ALL_STATIN_DISPLAYS
    FROM StatinMedications
    GROUP BY PERSON_ID
)
-- Final selection
SELECT
    bp.PERSON_ID,
    bp.SK_PATIENT_ID,
    bp.AGE,
    CASE
        WHEN NOT bp.HAS_STATIN
            AND NOT bp.HAS_STATIN_DECISION THEN TRUE
        ELSE FALSE
    END AS NEEDS_HIGH_DOSE_STATIN,
    bp.LATEST_STATIN_DATE,
    codes.ALL_STATIN_CODES,
    codes.ALL_STATIN_DISPLAYS
FROM DATA_LAB_NCL_TRAINING_TEMP.HEI_MIGRATION.INTERMEDIATE_LTC_LCS_CF_CVD_BASE bp
LEFT JOIN StatinCodes codes
    USING (PERSON_ID)
WHERE NOT bp.HAS_STATIN
    AND NOT bp.HAS_STATIN_DECISION;
