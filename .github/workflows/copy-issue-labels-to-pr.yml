name: Copy Issue Labels to PR and Update Issue Status

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  copy-labels-and-update-status:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Copy issue labels and assign issue to PR author
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const prBody = pr.body || '';
            
            // Regular expressions to match issue references
            const issuePatterns = [
              /(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#(\d+)/gi,
              /(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+https:\/\/github\.com\/[^\/]+\/[^\/]+\/issues\/(\d+)/gi
            ];
            
            // Extract all issue numbers
            const issueNumbers = new Set();
            
            for (const pattern of issuePatterns) {
              let match;
              while ((match = pattern.exec(prBody)) !== null) {
                issueNumbers.add(parseInt(match[1]));
              }
            }
            
            if (issueNumbers.size === 0) {
              console.log('No issue references found in PR body');
              return;
            }
            
            console.log(`Found issue references: ${Array.from(issueNumbers).join(', ')}`);
            
            // Get existing PR labels
            const existingPrLabels = pr.labels.map(label => label.name);
            console.log(`Existing PR labels: ${existingPrLabels.join(', ')}`);
            
            // Collect all labels from referenced issues
            const labelsToAdd = new Set();
            
            for (const issueNumber of issueNumbers) {
              try {
                const issue = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                const issueLabels = issue.data.labels.map(label => label.name);
                console.log(`Issue #${issueNumber} labels: ${issueLabels.join(', ')}`);
                
                // Add labels that aren't already on the PR
                for (const label of issueLabels) {
                  if (!existingPrLabels.includes(label)) {
                    labelsToAdd.add(label);
                  }
                }
              } catch (error) {
                console.log(`Error fetching issue #${issueNumber}: ${error.message}`);
                // Continue with other issues if one fails
              }
            }
            
            // Apply new labels to PR
            if (labelsToAdd.size > 0) {
              const newLabels = Array.from(labelsToAdd);
              console.log(`Adding labels to PR: ${newLabels.join(', ')}`);
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: newLabels
              });
              
              console.log(`Successfully added ${newLabels.length} labels to PR #${pr.number}`);
            } else {
              console.log('No new labels to add to PR');
            }
            
            // Assign referenced issues to PR author and update status to "Code Review"
            for (const issueNumber of issueNumbers) {
              try {
                const issue = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                // Assign issue to PR author if not already assigned
                const currentAssignees = issue.data.assignees.map(assignee => assignee.login);
                if (!currentAssignees.includes(pr.user.login)) {
                  await github.rest.issues.addAssignees({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    assignees: [pr.user.login]
                  });
                  console.log(`Assigned issue #${issueNumber} to ${pr.user.login}`);
                }
                
                // Update issue status to "Code Review" using GitHub Projects API
                // First, get the project items for this issue
                const query = `
                  query($owner: String!, $repo: String!, $issueNumber: Int!) {
                    repository(owner: $owner, name: $repo) {
                      issue(number: $issueNumber) {
                        projectItems(first: 10) {
                          nodes {
                            id
                            project {
                              id
                              title
                            }
                            fieldValues(first: 20) {
                              nodes {
                                ... on ProjectV2ItemFieldSingleSelectValue {
                                  id
                                  name
                                  field {
                                    ... on ProjectV2SingleSelectField {
                                      id
                                      name
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                
                const variables = {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issueNumber: issueNumber
                };
                
                const projectData = await github.graphql(query, variables);
                const projectItems = projectData.repository.issue.projectItems.nodes;
                
                // Update status for each project the issue is in
                for (const item of projectItems) {
                  // Find the Status field
                  const statusField = item.fieldValues.nodes.find(field => 
                    field.field && field.field.name.toLowerCase() === 'status'
                  );
                  
                  if (statusField && statusField.name !== 'Code Review') {
                    // Get the project's status field options
                    const projectQuery = `
                      query($projectId: ID!) {
                        node(id: $projectId) {
                          ... on ProjectV2 {
                            fields(first: 20) {
                              nodes {
                                ... on ProjectV2SingleSelectField {
                                  id
                                  name
                                  options {
                                    id
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    `;
                    
                    const projectInfo = await github.graphql(projectQuery, { projectId: item.project.id });
                    const statusFieldInfo = projectInfo.node.fields.nodes.find(field => 
                      field.name.toLowerCase() === 'status'
                    );
                    
                    if (statusFieldInfo) {
                      const codeReviewOption = statusFieldInfo.options.find(option => 
                        option.name === 'Code Review'
                      );
                      
                      if (codeReviewOption) {
                        // Update the status
                        const updateMutation = `
                          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                            updateProjectV2ItemFieldValue(input: {
                              projectId: $projectId
                              itemId: $itemId
                              fieldId: $fieldId
                              value: $value
                            }) {
                              projectV2Item {
                                id
                              }
                            }
                          }
                        `;
                        
                        await github.graphql(updateMutation, {
                          projectId: item.project.id,
                          itemId: item.id,
                          fieldId: statusFieldInfo.id,
                          value: {
                            singleSelectOptionId: codeReviewOption.id
                          }
                        });
                        
                        console.log(`Updated issue #${issueNumber} status to "Code Review" in project "${item.project.title}"`);
                      }
                    }
                  }
                }
                
              } catch (error) {
                console.log(`Error updating issue #${issueNumber}: ${error.message}`);
              }
            }