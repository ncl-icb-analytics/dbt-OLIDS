name: Auto-move Assigned Issues to In Progress

on:
  issues:
    types: [assigned]

jobs:
  move-to-in-progress:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Update status to In Progress for assigned issues
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const assignee = context.payload.assignee;
            
            console.log(`Issue #${issue.number} assigned to ${assignee.login}`);
            
            try {
              // Update issue status to "In Progress" using GitHub Projects API
              // First, get the project items for this issue
              const query = `
                query($owner: String!, $repo: String!, $issueNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $issueNumber) {
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            id
                            title
                          }
                          fieldValues(first: 20) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                id
                                name
                                field {
                                  ... on ProjectV2SingleSelectField {
                                    id
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const variables = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issueNumber: issue.number
              };
              
              const projectData = await github.graphql(query, variables);
              const projectItems = projectData.repository.issue.projectItems.nodes;
              
              if (projectItems.length === 0) {
                console.log(`Issue #${issue.number} is not in any projects`);
                return;
              }
              
              // Update status for each project the issue is in
              for (const item of projectItems) {
                // Find the Status field
                const statusField = item.fieldValues.nodes.find(field => 
                  field.field && field.field.name.toLowerCase() === 'status'
                );
                
                console.log(`Current status in project "${item.project.title}": ${statusField ? statusField.name : 'No status'}`);
                
                if (!statusField || statusField.name !== 'In Progress') {
                  // Get the project's status field options
                  const projectQuery = `
                    query($projectId: ID!) {
                      node(id: $projectId) {
                        ... on ProjectV2 {
                          fields(first: 20) {
                            nodes {
                              ... on ProjectV2SingleSelectField {
                                id
                                name
                                options {
                                  id
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  `;
                  
                  const projectInfo = await github.graphql(projectQuery, { projectId: item.project.id });
                  const statusFieldInfo = projectInfo.node.fields.nodes.find(field => 
                    field.name.toLowerCase() === 'status'
                  );
                  
                  if (statusFieldInfo) {
                    const inProgressOption = statusFieldInfo.options.find(option => 
                      option.name === 'In Progress'
                    );
                    
                    if (inProgressOption) {
                      // Update the status
                      const updateMutation = `
                        mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                          updateProjectV2ItemFieldValue(input: {
                            projectId: $projectId
                            itemId: $itemId
                            fieldId: $fieldId
                            value: $value
                          }) {
                            projectV2Item {
                              id
                            }
                          }
                        }
                      `;
                      
                      await github.graphql(updateMutation, {
                        projectId: item.project.id,
                        itemId: item.id,
                        fieldId: statusFieldInfo.id,
                        value: {
                          singleSelectOptionId: inProgressOption.id
                        }
                      });
                      
                      console.log(`Updated issue #${issue.number} status to "In Progress" in project "${item.project.title}"`);
                    } else {
                      console.log(`No "In Progress" option found in project "${item.project.title}"`);
                    }
                  } else {
                    console.log(`No status field found in project "${item.project.title}"`);
                  }
                } else {
                  console.log(`Issue #${issue.number} already has "In Progress" status in project "${item.project.title}"`);
                }
              }
              
            } catch (error) {
              console.log(`Error updating issue #${issue.number}: ${error.message}`);
            }