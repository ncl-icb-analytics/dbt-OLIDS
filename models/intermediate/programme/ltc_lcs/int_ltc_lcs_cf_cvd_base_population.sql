{{ config(
    materialized='table',
    post_hook=[
        "COMMENT ON TABLE {{ this }} IS 'Intermediate: LTC LCS CF CVD Base Population - Defines specialised CVD base population for Long Term Conditions case finding indicators with statin exclusions.

Clinical Purpose:
â€¢ Establishes specialised base population for CVD case finding measures requiring statin status filtering
â€¢ Applies comprehensive statin exclusions for patients already on statins, with allergies, or recent decisions
â€¢ Ensures appropriate population selection for CVD primary prevention case finding
â€¢ Provides consistent population denominator for CVD case finding indicators requiring statin-naive patients

Data Granularity:
â€¢ One row per eligible person aged 40-83 years for CVD case finding programmes
â€¢ Excludes patients on statins in last 12 months, with statin allergies/contraindications, or recent statin decisions
â€¢ Builds on standard LTC case finding base population with additional CVD-specific exclusions
â€¢ Includes statin status flags and latest dates for comprehensive filtering

Key Features:
â€¢ Age-specific population: 40-83 years for CVD primary prevention targeting
â€¢ Comprehensive statin exclusion logic: current statins, allergies, contraindications, recent decisions
â€¢ Integration with CVD medications and observations for statin status determination
â€¢ Reusable base population for multiple CVD case finding indicators requiring statin-naive patients

ðŸ¤– Generated by dbt. This table is managed by dbt - for model definitions and documentation, see https://github.com/ncl-icb-analytics/snowflake-hei-migration'"
    ]
) }}

-- General CVD base population for case finding indicators
-- Includes patients aged 40-83 who are not on statins, have no statin allergies/contraindications, and no recent statin decisions

WITH base_population AS (
    -- Get base population aged 40-83
    SELECT
        bp.person_id,
        bp.age
    FROM {{ ref('int_ltc_lcs_cf_base_population') }} AS bp
    WHERE bp.age BETWEEN 40 AND 83
),

statin_medications AS (
    -- Get patients on any statins in last 12 months
    SELECT DISTINCT
        person_id,
        MAX(order_date) AS latest_statin_date
    FROM {{ ref('int_ltc_lcs_cvd_medications') }}
    WHERE
        cluster_id IN (
            'STATIN_CVD_MEDICATIONS',
            'STATIN_CVD_63_MEDICATIONS',
            'STATIN_CVD_64_MEDICATIONS',
            'STATIN_CVD_65_MEDICATIONS'
        )
        AND order_date >= DATEADD('month', -12, CURRENT_DATE())
    GROUP BY person_id
),

statin_exclusions AS (
    -- Get patients with statin allergies/contraindications or recent decisions
    SELECT DISTINCT
        person_id,
        MAX(CASE
            WHEN
                cluster_id IN (
                    'STATIN_ALLERGY_ADVERSE_REACTION', 'STATIN_NOT_INDICATED'
                )
                THEN clinical_effective_date
        END) AS latest_statin_allergy_date,
        MAX(CASE
            WHEN cluster_id = 'STATINDEC_COD'
                THEN clinical_effective_date
        END) AS latest_statin_decision_date
    FROM {{ ref('int_ltc_lcs_cvd_observations') }}
    WHERE
        cluster_id IN (
            'STATIN_ALLERGY_ADVERSE_REACTION',
            'STATIN_NOT_INDICATED',
            'STATINDEC_COD'
        )
        AND (
            (
                cluster_id IN (
                    'STATIN_ALLERGY_ADVERSE_REACTION', 'STATIN_NOT_INDICATED'
                )
            )
            OR (
                cluster_id = 'STATINDEC_COD'
                AND clinical_effective_date
                >= DATEADD('month', -60, CURRENT_DATE())
            )
        )
    GROUP BY person_id
)

-- Final selection: patients not on statins, no allergies, no recent decisions
SELECT
    bp.person_id,
    bp.age,
    sm.latest_statin_date,
    se.latest_statin_allergy_date,
    se.latest_statin_decision_date,
    COALESCE(sm.person_id IS NOT NULL, FALSE) AS has_statin,
    COALESCE(se.latest_statin_allergy_date IS NOT NULL, FALSE)
        AS has_statin_allergy,
    COALESCE(se.latest_statin_decision_date IS NOT NULL, FALSE)
        AS has_statin_decision
FROM base_population AS bp
LEFT JOIN statin_medications AS sm ON bp.person_id = sm.person_id
LEFT JOIN statin_exclusions AS se ON bp.person_id = se.person_id
WHERE
    NOT COALESCE(sm.person_id IS NOT NULL, FALSE)  -- Not on statins
    AND NOT COALESCE(se.latest_statin_allergy_date IS NOT NULL, FALSE)  -- No statin allergies
    AND NOT COALESCE(se.latest_statin_decision_date IS NOT NULL, FALSE)  -- No statin decisions
