{{
    config(
        materialized='table',
        cluster_by=['person_id', 'clinical_effective_date'],
        post_hook=[
            "COMMENT ON TABLE {{ this }} IS 'Intermediate: CKD Diagnoses All - Complete history of all chronic kidney disease diagnosis and resolution observations for QOF register management.

Clinical Purpose:
â€¢ QOF chronic kidney disease register data collection and monitoring
â€¢ Kidney function deterioration tracking and staging
â€¢ CKD progression monitoring and clinical decision support
â€¢ Resolution status tracking for improved clinical outcomes

Data Granularity:
â€¢ One row per chronic kidney disease diagnosis or resolution observation
â€¢ Uses CKD_COD (diagnosis) and CKDRES_COD (resolved) QOF clusters
â€¢ Includes all patients regardless of status for comprehensive QOF reporting

Key Features:
â€¢ Diagnosis and resolution code classification for register eligibility
â€¢ Age restrictions typically â‰¥18 years applied in downstream processing
â€¢ Critical for kidney function monitoring and preservation protocols
â€¢ Essential input for CKD care pathway optimisation

ðŸ¤– Generated by dbt. This table is managed by dbt - for model definitions and documentation, see https://github.com/ncl-icb-analytics/snowflake-hei-migration'"
        ]
    )
}}

/*
All chronic kidney disease (CKD) diagnosis observations from clinical records.
Uses QOF CKD cluster IDs:
- CKD_COD: CKD diagnoses
- CKDRES_COD: CKD resolved/remission codes

Clinical Purpose:
- QOF CKD register data collection
- Kidney function monitoring
- CKD staging and progression tracking
- Resolution status monitoring

QOF Context:
CKD register includes persons with CKD diagnosis codes who have not
been resolved. Resolution logic applied in downstream fact models.
Age restrictions typically â‰¥18 years applied in fact layer.

Includes ALL persons (active, inactive, deceased) following intermediate layer principles.
This is OBSERVATION-LEVEL data - one row per CKD observation.
Use this model as input for fct_person_ckd_register.sql which applies QOF business rules.
*/

SELECT
    obs.observation_id,
    obs.person_id,
    obs.clinical_effective_date,
    obs.mapped_concept_code AS concept_code,
    obs.mapped_concept_display AS concept_display,
    obs.cluster_id AS source_cluster_id,

    -- CKD-specific flags (observation-level only)
    CASE WHEN obs.cluster_id = 'CKD_COD' THEN TRUE ELSE FALSE END AS is_ckd_diagnosis_code,
    CASE WHEN obs.cluster_id = 'CKDRES_COD' THEN TRUE ELSE FALSE END AS is_ckd_resolved_code,

    -- CKD observation type determination
    CASE
        WHEN obs.cluster_id = 'CKD_COD' THEN 'CKD Diagnosis'
        WHEN obs.cluster_id = 'CKDRES_COD' THEN 'CKD Resolved'
        ELSE 'Unknown'
    END AS ckd_observation_type

FROM ({{ get_observations("'CKD_COD', 'CKDRES_COD'") }}) obs
WHERE obs.clinical_effective_date IS NOT NULL

ORDER BY person_id, clinical_effective_date, observation_id
