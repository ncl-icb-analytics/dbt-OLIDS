CREATE OR REPLACE DYNAMIC TABLE DATA_LAB_NCL_TRAINING_TEMP.HEI_MIGRATION.DIM_PROG_LTC_LCS_CF_SUMMARY
TARGET_LAG = '4 hours'
REFRESH_MODE = AUTO
INITIALIZE = ON_CREATE
WAREHOUSE = NCL_ANALYTICS_XS
AS
WITH BasePopulation AS (
    -- Get distinct person IDs from both AF tables
    SELECT DISTINCT 
        PERSON_ID,
        SK_PATIENT_ID
    FROM (
        SELECT PERSON_ID, SK_PATIENT_ID 
        FROM DATA_LAB_NCL_TRAINING_TEMP.HEI_MIGRATION.DIM_PROG_LTC_LCS_CF_AF_61
        UNION
        SELECT PERSON_ID, SK_PATIENT_ID 
        FROM DATA_LAB_NCL_TRAINING_TEMP.HEI_MIGRATION.DIM_PROG_LTC_LCS_CF_AF_62
    )
),
IndicatorData AS (
    -- AF_61
    SELECT 
        PERSON_ID,
        SK_PATIENT_ID,
        'AF_61' AS INDICATOR_CODE,
        LATEST_AF_MEDICATION_DATE AS INDICATOR_DATE,
        1 AS INDICATOR_VALUE  -- Using 1 instead of TRUE for numeric aggregation
    FROM DATA_LAB_NCL_TRAINING_TEMP.HEI_MIGRATION.DIM_PROG_LTC_LCS_CF_AF_61
    
    UNION ALL
    
    -- AF_62
    SELECT 
        PERSON_ID,
        SK_PATIENT_ID,
        'AF_62' AS INDICATOR_CODE,
        LATEST_PULSE_CHECK_DATE AS INDICATOR_DATE,
        1 AS INDICATOR_VALUE
    FROM DATA_LAB_NCL_TRAINING_TEMP.HEI_MIGRATION.DIM_PROG_LTC_LCS_CF_AF_62
    
    -- Future indicators will be UNION ALL here
    -- UNION ALL
    -- SELECT PERSON_ID, SK_PATIENT_ID, 'CKD_61', LATEST_MEDICATION_DATE, 1
    -- FROM DATA_LAB_NCL_TRAINING_TEMP.HEI_MIGRATION.DIM_PROG_LTC_LCS_CF_CKD_61
    -- etc...
),
AllIndicators AS (
    -- Create base rows for all possible indicators
    SELECT 
        bp.PERSON_ID,
        bp.SK_PATIENT_ID,
        i.INDICATOR_CODE,
        CAST(NULL AS DATE) AS INDICATOR_DATE,
        0 AS INDICATOR_VALUE  -- Using 0 instead of FALSE
    FROM BasePopulation bp
    CROSS JOIN (
        SELECT 'AF_61' AS INDICATOR_CODE
        UNION ALL SELECT 'AF_62'
        UNION ALL SELECT 'CKD_61'
        UNION ALL SELECT 'CKD_62'
        UNION ALL SELECT 'CKD_63'
        UNION ALL SELECT 'CKD_64'
        UNION ALL SELECT 'CVD_61'
        UNION ALL SELECT 'CVD_62'
        UNION ALL SELECT 'CVD_63'
        UNION ALL SELECT 'CVD_64'
        UNION ALL SELECT 'CVD_65'
        UNION ALL SELECT 'CVD_66'
        UNION ALL SELECT 'CYP_AST_61'
        UNION ALL SELECT 'DM_61'
        UNION ALL SELECT 'DM_62'
        UNION ALL SELECT 'DM_63'
        UNION ALL SELECT 'DM_64'
        UNION ALL SELECT 'DM_65'
        UNION ALL SELECT 'DM_66'
        UNION ALL SELECT 'HTN_61'
        UNION ALL SELECT 'HTN_62'
        UNION ALL SELECT 'HTN_63'
        UNION ALL SELECT 'HTN_65'
        UNION ALL SELECT 'HTN_66'
        UNION ALL SELECT 'HF_61'
    ) i
),
CombinedData AS (
    -- Combine actual and base data
    SELECT 
        COALESCE(id.PERSON_ID, ai.PERSON_ID) AS PERSON_ID,
        COALESCE(id.SK_PATIENT_ID, ai.SK_PATIENT_ID) AS SK_PATIENT_ID,
        ai.INDICATOR_CODE,
        COALESCE(id.INDICATOR_DATE, ai.INDICATOR_DATE) AS INDICATOR_DATE,
        COALESCE(id.INDICATOR_VALUE, ai.INDICATOR_VALUE) AS INDICATOR_VALUE
    FROM AllIndicators ai
    LEFT JOIN IndicatorData id 
        ON ai.PERSON_ID = id.PERSON_ID 
        AND ai.SK_PATIENT_ID = id.SK_PATIENT_ID 
        AND ai.INDICATOR_CODE = id.INDICATOR_CODE
)
-- Final aggregation using numeric values for flags
SELECT
    PERSON_ID,
    SK_PATIENT_ID,
    MAX(INDICATOR_DATE) AS LATEST_INDICATOR_DATE,
    SUM(INDICATOR_VALUE) AS TOTAL_INDICATORS_MET,
    LISTAGG(CASE WHEN INDICATOR_VALUE = 1 THEN INDICATOR_CODE END, ',') WITHIN GROUP (ORDER BY INDICATOR_CODE) AS INDICATOR_LIST,
    -- Convert numeric values to boolean flags
    MAX(CASE WHEN INDICATOR_CODE = 'AF_61' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_AF_61,
    MAX(CASE WHEN INDICATOR_CODE = 'AF_62' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_AF_62,
    MAX(CASE WHEN INDICATOR_CODE = 'CKD_61' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_CKD_61,
    MAX(CASE WHEN INDICATOR_CODE = 'CKD_62' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_CKD_62,
    MAX(CASE WHEN INDICATOR_CODE = 'CKD_63' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_CKD_63,
    MAX(CASE WHEN INDICATOR_CODE = 'CKD_64' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_CKD_64,
    MAX(CASE WHEN INDICATOR_CODE = 'CVD_61' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_CVD_61,
    MAX(CASE WHEN INDICATOR_CODE = 'CVD_62' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_CVD_62,
    MAX(CASE WHEN INDICATOR_CODE = 'CVD_63' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_CVD_63,
    MAX(CASE WHEN INDICATOR_CODE = 'CVD_64' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_CVD_64,
    MAX(CASE WHEN INDICATOR_CODE = 'CVD_65' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_CVD_65,
    MAX(CASE WHEN INDICATOR_CODE = 'CVD_66' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_CVD_66,
    MAX(CASE WHEN INDICATOR_CODE = 'CYP_AST_61' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_CYP_AST_61,
    MAX(CASE WHEN INDICATOR_CODE = 'DM_61' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_DM_61,
    MAX(CASE WHEN INDICATOR_CODE = 'DM_62' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_DM_62,
    MAX(CASE WHEN INDICATOR_CODE = 'DM_63' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_DM_63,
    MAX(CASE WHEN INDICATOR_CODE = 'DM_64' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_DM_64,
    MAX(CASE WHEN INDICATOR_CODE = 'DM_65' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_DM_65,
    MAX(CASE WHEN INDICATOR_CODE = 'DM_66' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_DM_66,
    MAX(CASE WHEN INDICATOR_CODE = 'HTN_61' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_HTN_61,
    MAX(CASE WHEN INDICATOR_CODE = 'HTN_62' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_HTN_62,
    MAX(CASE WHEN INDICATOR_CODE = 'HTN_63' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_HTN_63,
    MAX(CASE WHEN INDICATOR_CODE = 'HTN_65' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_HTN_65,
    MAX(CASE WHEN INDICATOR_CODE = 'HTN_66' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_HTN_66,
    MAX(CASE WHEN INDICATOR_CODE = 'HF_61' THEN INDICATOR_VALUE ELSE 0 END) = 1 AS IS_HF_61
FROM CombinedData
GROUP BY PERSON_ID, SK_PATIENT_ID; 